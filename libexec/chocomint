#!/usr/bin/env bash

_CHOCOMINT_LIBEXEC_DIR="$(dirname -- "$(readlink -f -- "${BASH_SOURCE:-$0}")")"
_CHOCOMINT_TARGET_FULLPATH="$(readlink -f -- "$1")"

_CHOCOMINT_CMD_OUT="/tmp/_chocomint_command_stdout.$$.log"
_CHOCOMINT_CMD_ERR="/tmp/_chocomint_command_stderr.$$.log"

_CHOCOMINT_CMD_SUCCESS=0
_CHOCOMINT_CMD_COUNT=0
_CHOCOMINT_TEST_FAILURE=0
_CHOCOMINT_TEST_SUCCESS=0
_CHOCOMINT_TEST_COUNT=0
_CHOCOMINT_FAILURE=false
_CHOCOMINT_TESTEXIST=false

source $_CHOCOMINT_LIBEXEC_DIR/lib/outputs

_chocomint_analyze_test_results() {
  # $1 exitstatus
  local _chocomint_cmd_failure=false
  local _chocomint_left _chocomint_right
  ((_CHOCOMINT_CMD_COUNT++))

  for _chocomint_i in $(seq 0 ${_CHOCOMINT_HASH[$_CHOCOMINT_TESTLINE,max]})
  do
    _chocomint_left="$(eval echo "${_CHOCOMINT_HASH[$_CHOCOMINT_TESTLINE,$_chocomint_i,left]}")"
    _chocomint_right="$(eval echo "${_CHOCOMINT_HASH[$_CHOCOMINT_TESTLINE,$_chocomint_i,right]}")"
    ((_CHOCOMINT_TEST_COUNT++))

    if $_CHOCOMINT_LIBEXEC_DIR/judge \
        "$_chocomint_left" \
        "${_CHOCOMINT_HASH[$_CHOCOMINT_TESTLINE,$_chocomint_i,mid]}" \
        "$_chocomint_right" \
        "$1" \
        "$_CHOCOMINT_CMD_OUT" \
        "$_CHOCOMINT_CMD_ERR"
    then
      _chocomint_ok \
        "$_chocomint_left" \
        "${_CHOCOMINT_HASH[$_CHOCOMINT_TESTLINE,$_chocomint_i,mid]}" \
        "$_chocomint_right" \
        "$1"
      ((_CHOCOMINT_TEST_SUCCESS++))
    else
      _chocomint_ng \
        "$_chocomint_left" \
        "${_CHOCOMINT_HASH[$_CHOCOMINT_TESTLINE,$_chocomint_i,mid]}" \
        "$_chocomint_right" \
        "$1"
      _chocomint_cmd_failure=true
      _CHOCOMINT_FAILURE=true
      ((_CHOCOMINT_TEST_FAILURE++))
    fi
  done

  _chocomint_display_if_failed "$_chocomint_cmd_failure"
}


_chocomint_cache_execution_data() {
  _CHOCOMINT_LINENO_CACHE="$1"
  _CHOCOMINT_CMD_CACHE="$2"

  if [ "${_CHOCOMINT_TEST_COMMENT_STYLE[$1]}" = "EOL" ]; then
    _CHOCOMINT_TESTEXIST=true
    _CHOCOMINT_TESTLINE="$1"
  elif [ "${_CHOCOMINT_TEST_COMMENT_STYLE[$(($1+1))]}" = "NL" ]; then
    _CHOCOMINT_TESTEXIST=true
    _CHOCOMINT_TESTLINE="$(($1+1))"
  else
    _CHOCOMINT_TESTEXIST=false
  fi

  $_CHOCOMINT_TESTEXIST && {
    : > $_CHOCOMINT_CMD_OUT
    : > $_CHOCOMINT_CMD_ERR
    _chocomint_show_command "$_CHOCOMINT_CMD_CACHE"
  }
}


_chocomint_trap() {
  # $1 line number
  # $2 source path
  local _chocomint_prev_stat="$?"

  if [ "$2" = "$_CHOCOMINT_TARGET_FULLPATH" ]; then
    $_CHOCOMINT_TESTEXIST &&
      _chocomint_analyze_test_results "$_chocomint_prev_stat"
    _chocomint_cache_execution_data "$1" "$BASH_COMMAND"
  fi
}


_chocomint_test_process() {
  set -T; trap '_chocomint_trap "$LINENO" "$BASH_SOURCE"' DEBUG
  exec 3>&1 4>&2 1> $_CHOCOMINT_CMD_OUT 2> $_CHOCOMINT_CMD_ERR
  source "$1"; local exitstat=$?
  # if the last command has a test, execute the analysis here.
  $_CHOCOMINT_TESTEXIST &&
    _chocomint_analyze_test_results "$exitstat"
  exec 1>&3- 2>&4-
  trap DEBUG; set +T
  rm "$_CHOCOMINT_CMD_OUT" "$_CHOCOMINT_CMD_ERR"
}


_chocomint_main() {
  echo '============'
  echo 'chocomint.sh'
  echo '============'

  echo -n 'Parsing...'
  source <($_CHOCOMINT_LIBEXEC_DIR/parse $_CHOCOMINT_TARGET_FULLPATH) # local variable
  echo '...done.'

  _chocomint_test_process "$_CHOCOMINT_TARGET_FULLPATH"

  _chocomint_show_overall \
    "$_CHOCOMINT_TEST_FAILURE" \
    "$_CHOCOMINT_TEST_SUCCESS" \
    "$_CHOCOMINT_TEST_COUNT" \
    "$_CHOCOMINT_CMD_SUCCESS" \
    "$_CHOCOMINT_CMD_COUNT"

  $_CHOCOMINT_FAILURE && return 1
  return 0
}

_chocomint_main "$1"
