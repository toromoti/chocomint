#!/usr/bin/env bash

NAME='chocomint.sh'
VERSION='0.6.0-rc'

export _CHM_DEBUG=${DEBUG:-false}

export _CHM_CMD_OUT_FILE=$(mktemp "/tmp/_chm_command_stdout.tmp.$$.XXXXXX")
export _CHM_CMD_ERR_FILE=$(mktemp "/tmp/_chm_command_stderr.tmp.$$.XXXXXX")

export _CHM_PARSER_FILE=$(mktemp "/tmp/_chm_parser.tmp.$$.XXXXXX")

export _CHM_TEST_RESULTS_FILE=$(mktemp "/tmp/_chm_test_results.tmp.$$.XXXXXX")
# variables in _CHM_TEST_RESULTS_FILE
export _CHM_TEST_FAILURE=0
export _CHM_TEST_SUCCESS=0
export _CHM_TEST_COUNT=0
export _CHM_CMD_SUCCESS=0
export _CHM_CMD_COUNT=0
export _CHM_FAILURE=false

export _CHM_LIBEXEC="$(dirname -- "$(readlink -f -- "${BASH_SOURCE:-$0}")")"

source "${_CHM_LIBEXEC}/chocomint-lib/outputs"

for opt in "$@"
do
  case "${opt}" in
    '--ignore-parse-error' )
      IGNORE_PARSE_ERROR=true
      shift 1
      ;;
  esac
done

system_check() {
  if [ ! -t 1 ]; then
    export _CHM_TPUT="true"
  else
    export _CHM_IS_TERMINAL="true"
    if type tput > /dev/null 2>&1
    then
      export _CHM_TPUT="tput"
    else
      echo "WARN: \"tput\" command is not found"
      echo "WARN: run without coloring"
      echo
      export _CHM_TPUT="true"
    fi
  fi
}


file_check() {
  # $1 target fullpath
  [ -d "$1" ] && {
    echo "WARN: \"$1\" is a directory" 1>&2
    return 1
  }
  [ -f "$1" ] || {
    echo "No such a file: \"$1\"" 1>&2
    exit 3
  }
  return 0
}


parse() {
  "${_CHM_LIBEXEC}/chocomint-parse" "$@" || {
    local exitcode=$?
    case ${exitcode} in
      '10'|'11'|'12' ) : ;;
      * )
        echo "chocomint-parse: Unknown Error (exitcode: ${exitcode})"
        ;;
    esac
    [ "${IGNORE_PARSE_ERROR}" ] || exit ${exitcode}
  }
}


run() {
  local file_num_count=1
  local path
  for path in "$@"
  do
    if [ "${_CHM_DATABASE[${path},meta,name]}" ]; then
      _chm_outputs.section "[${file_num_count}/${#@}] ${_CHM_DATABASE[${path},meta,name]} (${path##*/})"
    elif [ "${_CHM_DATABASE[${path},meta,title]}" ]; then
      _chm_outputs.section "[${file_num_count}/${#@}] ${_CHM_DATABASE[${path},meta,title]} (${path##*/})"
    else
      _chm_outputs.section "[${file_num_count}/${#@}] ${path}"
    fi

    if [ "${_CHM_DATABASE[${path},parse_error]}" ]; then
      echo '==> Skip this test by Parse errors/warnings' 1>&2
      echo 1>&2
    else
      "${_CHM_LIBEXEC}/chocomint-main" "${path}" || {
        local exitcode=$?
        case ${exitcode} in
          '21' ) : ;; # in chocomint-main-judge
          * )
            echo "chocomint-main: Unknown Error (exitcode: ${exitcode})"
            cat "${_CHM_CMD_OUT_FILE}"
            cat "${_CHM_CMD_ERR_FILE}"
            ;;
        esac
        exit ${exitcode}
      }
      source "${_CHM_TEST_RESULTS_FILE}"
    fi
    ((file_num_count++))
  done
}


main() {
  [ "$1" ] || {
    echo "${NAME}: no input file" 1>&2
    exit 2
  }

  system_check

  _chm_outputs.title "${NAME} ${VERSION}"

  local i
  for i in "$@"
  do
    local path="$(readlink -f -- "${i}")"
    file_check "${path}" && {
      local path_list=("${path_list[@]}" "${path}")
    }
  done
  [ "${path_list[*]}" ] || exit 3

  parse "${path_list[@]}"
  source "${_CHM_PARSER_FILE}"

  run "${path_list[@]}"
  source "${_CHM_TEST_RESULTS_FILE}"

  _chm_outputs.overall_results \
    "${_CHM_TEST_FAILURE}"     \
    "${_CHM_TEST_SUCCESS}"     \
    "${_CHM_TEST_COUNT}"       \
    "${_CHM_CMD_SUCCESS}"      \
    "${_CHM_CMD_COUNT}"

  if ${_CHM_FAILURE}; then
    return 1
  else
    return 0
  fi
}


exit_trap() {
  {
    rm "${_CHM_CMD_OUT_FILE}"
    rm "${_CHM_CMD_ERR_FILE}"
    rm "${_CHM_TEST_RESULTS_FILE}"
    rm "${_CHM_PARSER_FILE}"
  } > /dev/null 2>&1
}


trap 'exit_trap' EXIT

main "$@"
