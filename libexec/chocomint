#!/usr/bin/env bash

_CHOCOMINT_LIBEXEC_DIR="$(dirname -- "$(readlink -f -- "${BASH_SOURCE:-$0}")")"

_CHOCOMINT_CMD_OUT="/tmp/_chocomint_command_stdout.$$.log"
_CHOCOMINT_CMD_ERR="/tmp/_chocomint_command_stderr.$$.log"

source $_CHOCOMINT_LIBEXEC_DIR/outputs

_chocomint_analyze_test_results() {
  # $1 exitstatus
  # $2 stdout
  # $3 stderr
  local _chocomint_cmd_failure=false
  local _chocomint_left _chocomint_right
  for _chocomint_i in `seq 0 ${_CHOCOMINT_HASH[$_CHOCOMINT_TESTLINE,max]}`
  do
    _chocomint_left="$(eval echo "${_CHOCOMINT_HASH[$_CHOCOMINT_TESTLINE,$_chocomint_i,left]}")"
    _chocomint_right="$(eval echo "${_CHOCOMINT_HASH[$_CHOCOMINT_TESTLINE,$_chocomint_i,right]}")"
    if $_CHOCOMINT_LIBEXEC_DIR/judge \
        "$_chocomint_left" \
        "${_CHOCOMINT_HASH[$_CHOCOMINT_TESTLINE,$_chocomint_i,mid]}" \
        "$_chocomint_right" \
        "$1" \
        "$_CHOCOMINT_CMD_OUT" \
        "$_CHOCOMINT_CMD_ERR"
    then
      _chocomint_ok \
        "$_chocomint_left" \
        "${_CHOCOMINT_HASH[$_CHOCOMINT_TESTLINE,$_chocomint_i,mid]}" \
        "$_chocomint_right"
      ((_CHOCOMINT_TEST_SUCCESS++))
    else
      _chocomint_ng \
        "$_chocomint_left" \
        "${_CHOCOMINT_HASH[$_CHOCOMINT_TESTLINE,$_chocomint_i,mid]}" \
        "$_chocomint_right"
      _chocomint_cmd_failure=true
      _CHOCOMINT_FAILURE=true
      ((_CHOCOMINT_TEST_FAILURE++))
    fi
    ((_CHOCOMINT_TEST_COUNT++))
  done

  if $_chocomint_cmd_failure; then
    _chocomint_echo "failed. then, display 'stdout' and 'stderr'."
    if [ -s "$_CHOCOMINT_CMD_OUT" ] || [ -s "$_CHOCOMINT_CMD_ERR" ]; then
      if [ -s "$_CHOCOMINT_CMD_OUT" ]; then
        _chocomint_tput bold
        _chocomint_echo "=== stdout begin ==="
        _chocomint_tput sgr0
        _chocomint_cat $_CHOCOMINT_CMD_OUT
        _chocomint_tput sgr0
        _chocomint_tput bold
        _chocomint_echo "==== stdout end ===="
        _chocomint_tput sgr0
      else
        _chocomint_echo "'stdout' is nothing."
      fi
      if [ -s "$_CHOCOMINT_CMD_ERR" ]; then
        _chocomint_tput bold
        _chocomint_echo "=== stderr begin ==="
        _chocomint_tput sgr0
        _chocomint_cat $_CHOCOMINT_CMD_ERR
        _chocomint_tput sgr0
        _chocomint_tput bold
        _chocomint_echo "==== stderr end ===="
        _chocomint_tput sgr0
      else
        _chocomint_echo "'stderr' is nothing."
      fi
    else
      _chocomint_echo "but, there were no outputs."
    fi
  else
    _chocomint_echo "succeeded."
    ((_CHOCOMINT_CMD_SUCCESS++))
  fi

  ((_CHOCOMINT_CMD_COUNT++))
}


_chocomint_testexist_case() {
  _CHOCOMINT_TESTLINE="$1"
  _CHOCOMINT_TESTEXIST=true
  : > $_CHOCOMINT_CMD_OUT
  : > $_CHOCOMINT_CMD_ERR
  _chocomint_tput bold
  _chocomint_tput setaf 3
  _chocomint_echo "=> $_CHOCOMINT_CMD_CACHE"
  _chocomint_tput sgr0
}


_chocomint_cache_execution_data() {
  _CHOCOMINT_LINENO_CACHE="$1"
  _CHOCOMINT_CMD_CACHE="$2"
  _CHOCOMINT_CMD_EVAL_CACHE=$(eval "echo -n \"$2\"")

  if [ "${_CHOCOMINT_TEST_COMMENT_STYLE[$1]}" = "EOL" ]; then
    _chocomint_testexist_case "$1"
  elif [ "${_CHOCOMINT_TEST_COMMENT_STYLE[$(($1+1))]}" = "NL" ]; then
    _chocomint_testexist_case "$(($1+1))"
  else
    _CHOCOMINT_TESTEXIST=false
  fi
}


_chocomint_trap() {
  # $1 line number
  # $2 source path
  local _chocomint_prev_stat="$?"

  if [ "$2" = "$_CHOCOMINT_TARGET_FULLPATH" ]; then
    $_CHOCOMINT_TESTEXIST && {
      _chocomint_analyze_test_results \
        "$_chocomint_prev_stat" \
        "$(<$_CHOCOMINT_CMD_OUT)" \
        "$(<$_CHOCOMINT_CMD_ERR)"
    }
    _chocomint_cache_execution_data "$1" "$BASH_COMMAND"
  fi
}


_chocomint_redirect_switch_on() {
  exec 3>&1 4>&2 1> $_CHOCOMINT_CMD_OUT 2> $_CHOCOMINT_CMD_ERR
}

_chocomint_redirect_switch_off() {
  exec 1>&3- 2>&4-
}

_chocomint_test_process() {
  _CHOCOMINT_TESTEXIST=false
  _chocomint_redirect_switch_on
  source "$1"; local exitstat=$?
  # if the last command has a test, execute the analysis here.
  $_CHOCOMINT_TESTEXIST && {
    _chocomint_analyze_test_results \
      "$exitstat" \
      "$(<$_CHOCOMINT_CMD_OUT)" \
      "$(<$_CHOCOMINT_CMD_ERR)"
  }
  _chocomint_redirect_switch_off

  rm "$_CHOCOMINT_CMD_OUT" "$_CHOCOMINT_CMD_ERR"
}

_chocomint_show_overall() {
  tput bold
  tput setaf 6
  echo "$_CHOCOMINT_TEST_FAILURE tests failed."
  echo "$_CHOCOMINT_TEST_SUCCESS/$_CHOCOMINT_TEST_COUNT tests," \
       "$_CHOCOMINT_CMD_SUCCESS/$_CHOCOMINT_CMD_COUNT commands succeeded."
  tput sgr0
}

_chocomint_main() {
  _CHOCOMINT_TARGET_FULLPATH="$(readlink -f -- "$1")"
  _CHOCOMINT_CMD_SUCCESS=0
  _CHOCOMINT_CMD_COUNT=0
  _CHOCOMINT_TEST_FAILURE=0
  _CHOCOMINT_TEST_SUCCESS=0
  _CHOCOMINT_TEST_COUNT=0
  _CHOCOMINT_FAILURE=false

  source <($_CHOCOMINT_LIBEXEC_DIR/parse $_CHOCOMINT_TARGET_FULLPATH)

  set -T; trap '_chocomint_trap "$LINENO" "$BASH_SOURCE"' DEBUG
  _chocomint_test_process "$_CHOCOMINT_TARGET_FULLPATH"
  trap DEBUG; set +T
  _chocomint_show_overall

  $_CHOCOMINT_FAILURE && return 1
  return 0
}

_chocomint_main "$1"
