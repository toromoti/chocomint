#!/usr/bin/env bash

_COMPOUND_LIBEXEC_DIR="$(dirname -- "$(readlink -f -- "${BASH_SOURCE:-$0}")")"

_COMPOUND_CMD_OUT="/tmp/_compound_command_stdout.$$.log"
_COMPOUND_CMD_ERR="/tmp/_compound_command_stderr.$$.log"

_compound_ok() {
  _compound_tput setaf 2
  _compound_echo -n " ✔ ok "
  _compound_tput sgr0
  _compound_echo " $@"
}

_compound_ng() {
  _compound_tput setaf 1
  _compound_echo -n " ✘ ng "
  _compound_tput sgr0
  _compound_echo " $@"
}

_compound_match() {
  if \egrep -q "$(eval echo "$1")" "$_COMPOUND_CMD_OUT" ||
     \egrep -q "$(eval echo "$1")" "$_COMPOUND_CMD_ERR"; then
    return 0
  else
    return 1
  fi
}

_compound_judge() {
  # $1 left string
  # $2 middle string
  # $3 right string
  # $4 exit status
  # $5 stdout
  # $6 stderr
  case $2 in
    "=" )
      if eval [ "$1" = "$3" ]; then
        _compound_ok "$1 $2 $3"
      else
        _compound_ng "$1 $2 $3"
      fi
      ;;
    "!=" )
      if [ "$1" != "$3" ]; then
        _compound_ok "$1 $2 $3"
      else
        _compound_ng "$1 $2 $3"
      fi
      ;;
    ":" )
      case $1 in
        'status' )
          if [ "$4" = "$3" ]; then
            _compound_ok "$1 $2 $3"
          else
            _compound_ng "$1 $2 $3"
          fi
          ;;
        'match' )
          if _compound_match "$3"; then
            _compound_ok "$1 $2 $3"
          else
            _compound_ng "$1 $2 $3"
          fi
          ;;
      esac
      ;;
    "!:" )
      case $1 in
        'status' )
          if [ "$4" != "$3" ]; then
            _compound_ok "$1 $2 $3"
          else
            _compound_ng "$1 $2 $3"
          fi
          ;;
        'match' )
          if _compound_match "$3"; then
            _compound_ng "$1 $2 $3"
          else
            _compound_ok "$1 $2 $3"
          fi
          ;;
      esac
      ;;
  esac
}


_compound_analyze_test_results() {
  # $1 exitstatus
  # $2 stdout
  # $3 stderr
  for _compound_i in `seq 0 ${_COMPOUND_HASH[$_COMPOUND_TESTLINE,max]}`
  do
    _compound_judge \
      "${_COMPOUND_HASH[$_COMPOUND_TESTLINE,$_compound_i,left]}" \
      "${_COMPOUND_HASH[$_COMPOUND_TESTLINE,$_compound_i,mid]}" \
      "${_COMPOUND_HASH[$_COMPOUND_TESTLINE,$_compound_i,right]}" \
      "$1" \
      "$2" \
      "$3"
  done
  _compound_echo
}


_compound_testexist_case() {
  _COMPOUND_TESTLINE="$1"
  _COMPOUND_TESTEXIST=true
  : > $_COMPOUND_CMD_OUT
  : > $_COMPOUND_CMD_ERR
  _compound_echo "# $_COMPOUND_CMD_CACHE"
}


_compound_cache_execution_data() {
  _COMPOUND_LINENO_CACHE="$1"
  _COMPOUND_CMD_CACHE="$2"
  _COMPOUND_CMD_EVAL_CACHE=$(eval "echo -n \"$2\"")

  if [ "${_COMPOUND_TEST_COMMENT_STYLE[$1]}" = "EOL" ]; then
    _compound_testexist_case "$1"
  elif [ "${_COMPOUND_TEST_COMMENT_STYLE[$(($1+1))]}" = "NL" ]; then
    _compound_testexist_case "$(($1+1))"
  else
    _COMPOUND_TESTEXIST=false
  fi
}


_compound_trap() {
  # $1 line number
  # $2 source path
  local _compound_prev_stat="$?"

  if [ "$2" = "$TARGET_FULLPATH" ]; then
    $_COMPOUND_TESTEXIST && {
      _compound_analyze_test_results \
        "$_compound_prev_stat" \
        "$(<$_COMPOUND_CMD_OUT)" \
        "$(<$_COMPOUND_CMD_ERR)"
    }
    _compound_cache_execution_data "$1" "$BASH_COMMAND"
  fi
}


_compound_redirect_switch_on() {
  exec 3>&1 4>&2 1> $_COMPOUND_CMD_OUT 2> $_COMPOUND_CMD_ERR
}


_compound_redirect_switch_off() {
  exec 1>&3- 2>&4-
}


_compound_test_process() {
  _COMPOUND_FAIL_COUNT=0
  _COMPOUND_TEST_COUNT=0
  _COMPOUND_TESTEXIST=false
  _compound_redirect_switch_on

  source "$1"; local exitstat=$?
  # if the last command has a test, execute the analysis here.
  $_COMPOUND_TESTEXIST && {
    _compound_analyze_test_results \
      "$exitstat" \
      "$(<$_COMPOUND_CMD_OUT)" \
      "$(<$_COMPOUND_CMD_ERR)"
  }

  _compound_redirect_switch_off

  rm "$_COMPOUND_CMD_OUT" "$_COMPOUND_CMD_ERR"
}


_compound_main() {
  TARGET_FULLPATH="$(readlink -f -- "$1")"
  eval "`$_COMPOUND_LIBEXEC_DIR/parse $TARGET_FULLPATH`"
  source $_COMPOUND_LIBEXEC_DIR/outputs

  set -T; trap '_compound_trap "$LINENO" "$BASH_SOURCE"' DEBUG

  _compound_test_process "$TARGET_FULLPATH"

  trap DEBUG; set +T
}


_compound_main "$1"
