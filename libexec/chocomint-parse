#!/usr/bin/env bash
# vim: ft=sh

declare -A _CHM_DB
declare -a _CHM_TEST_POSITION # "NL" or "EOL"
declare -i LINE_NUMBER=1
declare -i OFFSET_NUMBER=1
declare -i TEST_INDEX=-1
declare TEST_MARKER=":"
declare PARSE_METHOD="parse_nl" # initial parse-method
declare ERROR=false

error() {
  echo "`tput bold``tput setaf 1`[PARSER ERROR]`tput sgr0`"
  echo "`tput bold`$1`tput sgr0`"

  local begin_col=$((LINE_NUMBER - 3))
  local end_col=$((LINE_NUMBER + 3))
  local file_max_lines=`cat "$_CHM_TARGET_FULLPATH" | wc -l`
  local offset=""

  [ $begin_col -lt 1 ] && begin_col=1
  [ $end_col -gt $file_max_lines ] && end_col=$file_max_lines

  local cols_count=$begin_col
  local padding=${#end_col}

  echo -e "in \`$_CHM_TARGET_FULLPATH\` (${LINE_NUMBER}L)"
  echo
  while read -r line; do
    if [ $cols_count -eq $LINE_NUMBER ]; then
      echo -n '->'
      echo " `printf "%${padding}d" $cols_count` |  `tput setaf 1`$line`tput sgr0`"
    else
      echo -n '  '
      echo " `printf "%${padding}d" $cols_count` |  $line"
    fi
    ((cols_count++))
  done < <(sed -n "${begin_col},${end_col}p" "$_CHM_TARGET_FULLPATH")
  echo

  ERROR=true
}

valid() {
  local left=${_CHM_DB[$LINE_NUMBER,$TEST_INDEX,left]}
  local mid=${_CHM_DB[$LINE_NUMBER,$TEST_INDEX,mid]}
  local right=${_CHM_DB[$LINE_NUMBER,$TEST_INDEX,right]}

  case $mid in
    '='|'!='|'=~'|'!=~' )
      :
      ;;
    ':'|'!:'|':~'|'!:~' )
      case $left in
        'status' )
          case $mid in
            ':~'|'!:~' )
              error "\`$mid\`: Invalid Matcher for 'status'"
              ;;
          esac
          [ $right -ge 0 ] > /dev/null 2>&1 || error "\`$right\`: Invalid Status Code"
          ;;
        'output'|'stdout'|'stderr' )
          :
          ;;
        * )
          error "\`$left\`: Invalid Resource Type"
          ;;
      esac
      ;;
    * )
      error "\`$mid\`: Invalid Matcher"
      ;;
  esac
}

parse_test_dq_bs() {
  case $1 in
    * )
      TEST_COMMENT="$TEST_COMMENT""$1"
      PARSE_METHOD="parse_test_dq"
      ;;
  esac
}

parse_test_dq() {
  case $1 in
    '"' )
      TEST_COMMENT="$TEST_COMMENT""\""
      PARSE_METHOD=$PARENT_PARSE_METHOD
      ;;
    "\\" )
      TEST_COMMENT="$TEST_COMMENT""\\"
      PARSE_METHOD="parse_test_dq_bs"
      ;;
    "" )
      error "\`$TEST_COMMENT\`: Quote is not closed."
      PARSE_METHOD="parse_nl"
      TEST_COMMENT=""
      PARENT_PARSE_METHOD=""
      ;;
    * )
      TEST_COMMENT="$TEST_COMMENT""$1"
      ;;
  esac
}

parse_test_sq() {
  case $1 in
    "'" )
      TEST_COMMENT="$TEST_COMMENT""'"
      PARSE_METHOD=$PARENT_PARSE_METHOD
      ;;
    "" )
      error "\`$TEST_COMMENT\`: Quote is not closed."
      PARSE_METHOD="parse_nl"
      TEST_COMMENT=""
      PARENT_PARSE_METHOD=""
      ;;
    * )
      TEST_COMMENT="$TEST_COMMENT""$1"
      ;;
  esac
}

parse_test_bs() {
  case $1 in
    * )
      TEST_COMMENT="$TEST_COMMENT""$1"
      PARSE_METHOD=$PARENT_PARSE_METHOD
      ;;
  esac
}

parse_test_right() {
  PARENT_PARSE_METHOD="$FUNCNAME"
  case $1 in
    '"' )
      TEST_COMMENT="$TEST_COMMENT""\""
      PARSE_METHOD="parse_test_dq"
      ;;
    "'" )
      TEST_COMMENT="$TEST_COMMENT""'"
      PARSE_METHOD="parse_test_sq"
      ;;
    "\\" )
      TEST_COMMENT="$TEST_COMMENT""\\"
      PARSE_METHOD="parse_test_bs"
      ;;
    "" )
      [ "$TEST_COMMENT" = "" ] && {
        error "\`$TEST_COMMENT\`: No Test Contents >> EOL is here."
      }
      _CHM_TEST_POSITION[LINE_NUMBER]="$COMMENT_IN"
      _CHM_DB[$LINE_NUMBER,$TEST_INDEX,right]="$TEST_COMMENT"
      _CHM_DB[$LINE_NUMBER,max]="$TEST_INDEX"
      valid
      PARSE_METHOD="parse_nl"
      TEST_COMMENT=""
      PARENT_PARSE_METHOD=""
      ;;
    " "|"\t" )
      [ "$TEST_COMMENT" = "" ] && {
        error "\`$TEST_COMMENT\`: No Test Contents >> Is there an illegal blank character?"
        return
      }
      _CHM_DB[$LINE_NUMBER,$TEST_INDEX,right]="$TEST_COMMENT"
      valid
      PARSE_METHOD="parse_test_main"
      TEST_COMMENT=""
      PARENT_PARSE_METHOD=""
      ;;
    * )
      TEST_COMMENT="$TEST_COMMENT""$1"
      ;;
  esac
}

parse_test_mid() {
  case $1 in
    '='|':'|'!'|'~' )
      TEST_COMMENT="$TEST_COMMENT""$1"
      ;;
    * )
      _CHM_DB[$LINE_NUMBER,$TEST_INDEX,mid]="$TEST_COMMENT"
      TEST_COMMENT=""
      PARSE_METHOD="parse_test_right"
      parse_test_right "$1"
      ;;
  esac
}

parse_test_left() {
  PARENT_PARSE_METHOD="$FUNCNAME"
  case $1 in
    '"' )
      TEST_COMMENT="$TEST_COMMENT""\""
      PARSE_METHOD="parse_test_dq"
      ;;
    "'" )
      TEST_COMMENT="$TEST_COMMENT""'"
      PARSE_METHOD="parse_test_sq"
      ;;
    "\\" )
      TEST_COMMENT="$TEST_COMMENT""\\"
      PARSE_METHOD="parse_test_bs"
      ;;
    "!"|"="|":" )
      _CHM_DB[$LINE_NUMBER,$TEST_INDEX,left]="$TEST_COMMENT"
      TEST_COMMENT=""
      PARSE_METHOD="parse_test_mid"
      parse_test_mid "$1"
      ;;
    ' '|'\t' )
      TEST_COMMENT="$TEST_COMMENT""$1"
      error "\`$TEST_COMMENT\`: Invalid Resource Type Syntax >> Contain an illegal blank character?"
      ;;
    * )
      TEST_COMMENT="$TEST_COMMENT""$1"
      ;;
  esac
}

parse_test_main() {
  case $1 in
    " "|"\t" )
      :
      ;;
    "" )
      _CHM_TEST_POSITION[LINE_NUMBER]="$COMMENT_IN"
      _CHM_DB[$LINE_NUMBER,max]="$TEST_INDEX"
      PARSE_METHOD="parse_nl"
      TEST_COMMENT=""
      ;;
    * )
      ((TEST_INDEX++))
      PARSE_METHOD="parse_test_left"
      parse_test_left "$1"
      ;;
  esac
}

parse_hash() {
  case $1 in
    "$TEST_MARKER" )
      PARSE_METHOD="parse_test_main"
      ;;
    "" )
      PARSE_METHOD="parse_nl"
      ;;
    * )
      PARSE_METHOD="parse_main"
      ;;
  esac
}

parse_dq_bs() {
  case $1 in
    "" )
      PARSE_METHOD="parse_dq"
      ;;
    * )
      PARSE_METHOD="parse_dq"
      ;;
  esac
}

parse_dq() {
  case $1 in
    "\\" )
      PARSE_METHOD="parse_dq_bs"
      ;;
    '"' )
      PARSE_METHOD="parse_main"
      ;;
    "" )
      ;;
    * )
      :
      ;;
  esac
}

parse_sq() {
  case $1 in
    "'" )
      PARSE_METHOD="parse_main"
      ;;
    "" )
      ;;
    * )
      :
      ;;
  esac
}

parse_bs() {
  case $1 in
    "" )
      PARSE_METHOD="parse_main"
      ;;
    * )
      PARSE_METHOD="parse_main"
      ;;
  esac
}

parse_main() {
  case $1 in
    "#" )
      PARSE_METHOD="parse_hash"
      COMMENT_IN="EOL"
      ;;
    "\\" )
      PARSE_METHOD="parse_bs"
      ;;
    "'" )
      PARSE_METHOD="parse_sq"
      ;;
    '"' )
      PARSE_METHOD="parse_dq"
      ;;
    "" )
      PARSE_METHOD="parse_nl"
      ;;
    * )
      ;;
  esac
}

parse_nl_space() {
  case $1 in
    "#" )
      PARSE_METHOD="parse_hash"
      COMMENT_IN="NL"
      ;;
    " "|"\t" )
      PARSE_METHOD="parse_nl_space"
      ;;
    "\\" )
      PARSE_METHOD="parse_bs"
      ;;
    "'" )
      PARSE_METHOD="parse_sq"
      ;;
    '"' )
      PARSE_METHOD="parse_dq"
      ;;
    "" )
      PARSE_METHOD="parse_nl"
      ;;
    * )
      PARSE_METHOD="parse_main"
      ;;
  esac
}

parse_nl() {
  case $1 in
    "#" )
      PARSE_METHOD="parse_hash"
      COMMENT_IN="NL"
      ;;
    " "|"\t" )
      PARSE_METHOD="parse_nl_space"
      ;;
    "\\" )
      PARSE_METHOD="parse_bs"
      ;;
    "'" )
      PARSE_METHOD="parse_sq"
      ;;
    '"' )
      PARSE_METHOD="parse_dq"
      ;;
    "" )
      PARSE_METHOD="parse_nl"
      ;;
    * )
      PARSE_METHOD="parse_main"
      ;;
  esac
}

main() {
  local file=$1
  local line
  local char

  while IFS= read -r line; do
    while IFS= read -r -n 1 char; do
      $PARSE_METHOD "$char"
      ((OFFSET_NUMBER++))
    done < <(echo "$line")
    OFFSET_NUMBER=1
    TEST_INDEX=-1 # reset index. '-1' means that there is no test.
    ((LINE_NUMBER++))
  done < $file

  $ERROR && {
    echo "`tput bold``tput setaf 1`aborted...`tput sgr0`"
    exit 1
  }

  declare -p _CHM_TEST_POSITION > /dev/null 2>&1 || {
    echo "Test is not defined"
    exit 1
  }
  declare -p _CHM_DB            > /dev/null 2>&1 || {
    echo "Test is not defined"
    exit 1
  }
  declare -p _CHM_TEST_POSITION > $_CHM_TEST_POSITION_FILE
  declare -p _CHM_DB            > $_CHM_DB_FILE
}

main "$@"
