#!/usr/bin/env bash
# vim: ft=sh

declare -A _CHM_TEST_POSITION # "NL" or "EOL"
declare -A _CHM_DB

TEST_MARKER=":"

_tput() { $_CHM_TPUT "$@"; }

error() {
  echo -n "`_tput bold``_tput setaf 1`Parse error:`_tput sgr0` "
  echo "${1} (L${LINE_NUMBER})"

  local begin_col=$((LINE_NUMBER - 3))
  local end_col=$((LINE_NUMBER + 3))
  local file_max_lines=`cat "${TARGET_FULLPATH}" | wc -l`
  local offset=""

  [ ${begin_col} -lt 1 ] && begin_col=1
  [ ${end_col} -gt ${file_max_lines} ] && end_col=${file_max_lines}

  local cols_count=${begin_col}
  local padding=${#end_col}

  while read -r line; do
    if [ ${cols_count} -eq ${LINE_NUMBER} ]; then
      echo -n '->'
      echo " `printf "%${padding}d" ${cols_count}` |  `_tput setaf 1`${line}`_tput sgr0`"
    else
      echo -n '  '
      echo " `printf "%${padding}d" ${cols_count}` |  ${line}"
    fi
    ((cols_count++))
  done < <(sed -n "${begin_col},${end_col}p" "${TARGET_FULLPATH}")
  echo

  PARSE_ERROR=true
}

valid() {
  local left=${_CHM_DB[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},left]}
  local mid=${_CHM_DB[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},mid]}
  local right=${_CHM_DB[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},right]}

  case ${mid} in
    '='|'!='|'=~'|'!=~' )
      :
      ;;
    ':'|'!:'|':~'|'!:~'|'::'|'!::' )
      case ${left} in
        'status' )
          case ${mid} in
            ':~'|'!:~'|'::'|'!::' )
              error "\"${mid}\": invalid matcher"
              ;;
          esac
          [ ${right} -ge 0 ] > /dev/null 2>&1 || error "\"${right}\": invalid status code"
          ;;
        'output'|'stdout'|'stderr' )
          case ${mid} in
            '::'|'!::' )
              case ${right} in
                'None' )
                  :
                  ;;
                * )
                  error "\"${right}\": invalid keyword"
                  ;;
              esac
              ;;
          esac
          ;;
        * )
          error "\"${left}\": invalid resource"
          ;;
      esac
      ;;
    * )
      error "\"${mid}\": invalid matcher"
      ;;
  esac
}

parse_test_dq_bs() {
  case ${1} in
    * )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      PARSE_METHOD="parse_test_dq"
      ;;
  esac
}

parse_test_dq() {
  case ${1} in
    '"' )
      TEST_COMMENT="${TEST_COMMENT}""\""
      PARSE_METHOD=${PARENT_PARSE_METHOD}
      ;;
    "\\" )
      TEST_COMMENT="${TEST_COMMENT}""\\"
      PARSE_METHOD="parse_test_dq_bs"
      ;;
    "" )
      error "\"${TEST_COMMENT}\": quote is not closed"
      PARSE_METHOD="parse_nl"
      TEST_COMMENT=""
      PARENT_PARSE_METHOD=""
      ;;
    * )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      ;;
  esac
}

parse_test_sq() {
  case ${1} in
    "'" )
      TEST_COMMENT="${TEST_COMMENT}""'"
      PARSE_METHOD=${PARENT_PARSE_METHOD}
      ;;
    "" )
      error "\"${TEST_COMMENT}\": quote is not closed"
      PARSE_METHOD="parse_nl"
      TEST_COMMENT=""
      PARENT_PARSE_METHOD=""
      ;;
    * )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      ;;
  esac
}

parse_test_bs() {
  case ${1} in
    * )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      PARSE_METHOD=${PARENT_PARSE_METHOD}
      ;;
  esac
}

parse_test_right() {
  PARENT_PARSE_METHOD="${FUNCNAME}"
  case ${1} in
    '"' )
      TEST_COMMENT="${TEST_COMMENT}""\""
      PARSE_METHOD="parse_test_dq"
      ;;
    "'" )
      TEST_COMMENT="${TEST_COMMENT}""'"
      PARSE_METHOD="parse_test_sq"
      ;;
    "\\" )
      TEST_COMMENT="${TEST_COMMENT}""\\"
      PARSE_METHOD="parse_test_bs"
      ;;
    " "|"\t" )
      _CHM_DB[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},right]="${TEST_COMMENT}"
      valid
      PARSE_METHOD="parse_test_main"
      TEST_COMMENT=""
      PARENT_PARSE_METHOD=""
      ;;
    "" )
      _CHM_TEST_POSITION[${TARGET_FULLPATH},${LINE_NUMBER}]="${COMMENT_IN}"
      _CHM_DB[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},right]="${TEST_COMMENT}"
      _CHM_DB[${TARGET_FULLPATH},${LINE_NUMBER},max]="${TEST_INDEX}"
      TEST_EXIST=true
      valid
      PARSE_METHOD="parse_nl"
      TEST_COMMENT=""
      PARENT_PARSE_METHOD=""
      ;;
    * )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      ;;
  esac
}

parse_test_mid() {
  case ${1} in
    '='|':'|'!'|'~' )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      ;;
    " "|"\t" )
      error "\"${TEST_COMMENT}\": empty value"
      PARSE_METHOD="parse_test_main"
      TEST_COMMENT=""
      PARENT_PARSE_METHOD=""
      ;;
    "" )
      error "\"${TEST_COMMENT}\": empty value"
      PARSE_METHOD="parse_nl"
      TEST_COMMENT=""
      PARENT_PARSE_METHOD=""
      ;;
    * )
      _CHM_DB[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},mid]="${TEST_COMMENT}"
      TEST_COMMENT=""
      PARSE_METHOD="parse_test_right"
      parse_test_right "${1}"
      ;;
  esac
}

parse_test_left() {
  PARENT_PARSE_METHOD="${FUNCNAME}"
  case ${1} in
    '"' )
      TEST_COMMENT="${TEST_COMMENT}""\""
      PARSE_METHOD="parse_test_dq"
      ;;
    "'" )
      TEST_COMMENT="${TEST_COMMENT}""'"
      PARSE_METHOD="parse_test_sq"
      ;;
    "\\" )
      TEST_COMMENT="${TEST_COMMENT}""\\"
      PARSE_METHOD="parse_test_bs"
      ;;
    "!"|"="|":" )
      _CHM_DB[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},left]="${TEST_COMMENT}"
      TEST_COMMENT=""
      PARSE_METHOD="parse_test_mid"
      parse_test_mid "${1}"
      ;;
    ' '|'\t' )
      error "\"${TEST_COMMENT}\": invalid token"
      PARSE_METHOD="parse_test_main"
      TEST_COMMENT=""
      PARENT_PARSE_METHOD=""
      ;;
    '' )
      error "\"${TEST_COMMENT}\": invalid token"
      PARSE_METHOD="parse_nl"
      TEST_COMMENT=""
      PARENT_PARSE_METHOD=""
      ;;
    * )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      ;;
  esac
}

parse_test_main() {
  case ${1} in
    " "|"\t" )
      :
      ;;
    "" )
      _CHM_TEST_POSITION[${TARGET_FULLPATH},${LINE_NUMBER}]="${COMMENT_IN}"
      _CHM_DB[${TARGET_FULLPATH},${LINE_NUMBER},max]="${TEST_INDEX}"
      PARSE_METHOD="parse_nl"
      TEST_COMMENT=""
      ;;
    * )
      ((TEST_INDEX++))
      PARSE_METHOD="parse_test_left"
      parse_test_left "${1}"
      ;;
  esac
}

parse_hash() {
  case ${1} in
    "${TEST_MARKER}" )
      PARSE_METHOD="parse_test_main"
      ;;
    "" )
      PARSE_METHOD="parse_nl"
      ;;
    * )
      PARSE_METHOD="parse_main"
      ;;
  esac
}

parse_dq_bs() {
  case ${1} in
    "" )
      PARSE_METHOD="parse_dq"
      ;;
    * )
      PARSE_METHOD="parse_dq"
      ;;
  esac
}

parse_dq() {
  case ${1} in
    "\\" )
      PARSE_METHOD="parse_dq_bs"
      ;;
    '"' )
      PARSE_METHOD="parse_main"
      ;;
    "" )
      ;;
    * )
      :
      ;;
  esac
}

parse_sq() {
  case ${1} in
    "'" )
      PARSE_METHOD="parse_main"
      ;;
    "" )
      ;;
    * )
      :
      ;;
  esac
}

parse_bs() {
  case ${1} in
    "" )
      PARSE_METHOD="parse_main"
      ;;
    * )
      PARSE_METHOD="parse_main"
      ;;
  esac
}

parse_main() {
  case ${1} in
    "#" )
      PARSE_METHOD="parse_hash"
      COMMENT_IN="EOL"
      ;;
    "\\" )
      PARSE_METHOD="parse_bs"
      ;;
    "'" )
      PARSE_METHOD="parse_sq"
      ;;
    '"' )
      PARSE_METHOD="parse_dq"
      ;;
    "" )
      PARSE_METHOD="parse_nl"
      ;;
    * )
      ;;
  esac
}

parse_nl_space() {
  case ${1} in
    "#" )
      PARSE_METHOD="parse_hash"
      COMMENT_IN="NL"
      ;;
    " "|"\t" )
      PARSE_METHOD="parse_nl_space"
      ;;
    "\\" )
      PARSE_METHOD="parse_bs"
      ;;
    "'" )
      PARSE_METHOD="parse_sq"
      ;;
    '"' )
      PARSE_METHOD="parse_dq"
      ;;
    "" )
      PARSE_METHOD="parse_nl"
      ;;
    * )
      PARSE_METHOD="parse_main"
      ;;
  esac
}

parse_nl() {
  case ${1} in
    "#" )
      PARSE_METHOD="parse_hash"
      COMMENT_IN="NL"
      ;;
    " "|"\t" )
      PARSE_METHOD="parse_nl_space"
      ;;
    "\\" )
      PARSE_METHOD="parse_bs"
      ;;
    "'" )
      PARSE_METHOD="parse_sq"
      ;;
    '"' )
      PARSE_METHOD="parse_dq"
      ;;
    "" )
      PARSE_METHOD="parse_nl"
      ;;
    * )
      PARSE_METHOD="parse_main"
      ;;
  esac
}

parse() {
  TARGET_FULLPATH="${1}"
  local line
  local char

  while IFS= read -r line; do
    while IFS= read -r -n 1 char; do
      ${PARSE_METHOD} "${char}"
      ((OFFSET_NUMBER++))
    done < <(echo "${line}")
    OFFSET_NUMBER=1
    TEST_INDEX=-1 # reset index. '-1' means that there is no test.
    ((LINE_NUMBER++))
  done < ${TARGET_FULLPATH}
}

main() {
  PARSE_ERROR=false
  TEST_NOT_FOUND=false

  for i in "$@"
  do
    LINE_NUMBER=1
    OFFSET_NUMBER=1
    TEST_INDEX=-1
    PARSE_METHOD="parse_nl" # initial parse-method
    TEST_EXIST=false

    echo "==> Parsing: \"${i}\""
    parse "${i}"

    ${TEST_EXIST} || {
      echo "`_tput bold``_tput setaf 1`Parse error:`_tput sgr0` test not found"
      echo
      TEST_NOT_FOUND=true
    }
  done

  (${PARSE_ERROR} || ${TEST_NOT_FOUND}) && exit 1

  declare -p _CHM_TEST_POSITION > ${_CHM_TEST_POSITION_FILE}
  declare -p _CHM_DB            > ${_CHM_DB_FILE}
}

main "$@"
