#!/usr/bin/env bash
# vim: ft=sh

declare -A _CHM_TEST_POSITION # 'NL' or 'EOL'
declare -A _CHM_DATABASE
declare -A _CHM_PARSED

TEST_MARKER=${TEST_MARKER:-':'}
META_MARKER=${META_MARKER:-'@'}

for opt in "$@"
do
  case "$opt" in
    '-q' )
      QUIET=true
      shift 1
      ;;
  esac
done

_tput() { $_CHM_TPUT "$@"; }

eecho() { echo "$@" >&2; }

quiet?_echo() { [ "$QUIET" ] || echo "$@"; }

quiet?_eecho() { [ "$QUIET" ] || eecho "$@"; }

?() {
  if ! [ "$1" ]; then
    echo '?: no argument' >&2
    echo '?: no argument' >&4
    exit 121
  fi
  if [ "$2" ]; then
    if [ "$2" = 'true' ] || [ "$2" = 'false' ]; then
      eval "$1=$2"
    else
      echo '?: boolean type invalid value (must be "true" or "false")' >&2
      echo '?: boolean type invalid value (must be "true" or "false")' >&4
      exit 122
    fi
  else
    eval "local v=\$$1"
    if [ "$v" ]; then
      if [ "$v" = 'true' ] || [ "$v" = 'false' ]; then
        $v
      else
        echo '?: not boolean type variable' >&2
        echo '?: not boolean type variable' >&4
        exit 123
      fi
    else
      false
    fi
  fi
}

? test_exist false
? error_exist_flag false # Any even one of the multiple files
? not_found_flag false # Any even one of the multiple files
? parse_dup_flag false # Any even one of the multiple files

error() {
  eecho -n "$(_tput bold)$(_tput setaf 1)===> Parse error:$(_tput sgr0) "
  eecho "${1} (L${LINE_NUMBER})"

  local begin_col=$((LINE_NUMBER - 3))
  local end_col=$((LINE_NUMBER + 3))
  local file_max_lines=$(wc -l < "${TARGET_FULLPATH}")

  [ ${begin_col} -lt 1 ] && begin_col=1
  [ ${end_col} -gt "${file_max_lines}" ] && end_col=${file_max_lines}

  local cols_count=${begin_col}
  local padding=${#end_col}

  while read -r line; do
    if [ ${cols_count} -eq "${LINE_NUMBER}" ]; then
      eecho -n '->'
      eecho " $(printf "%${padding}d" ${cols_count}) |  $(_tput setaf 1)${line}$(_tput sgr0)"
    else
      eecho -n '  '
      eecho " $(printf "%${padding}d" ${cols_count}) |  ${line}"
    fi
    ((cols_count++))
  done < <(sed -n "${begin_col},${end_col}p" "${TARGET_FULLPATH}")
  eecho

  ? error_exist_flag true
  _CHM_DATABASE[${TARGET_FULLPATH},do_not_run]=true
}

valid() {
  local left=${_CHM_DATABASE[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},left]}
  local mid=${_CHM_DATABASE[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},mid]}
  local right=${_CHM_DATABASE[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},right]}

  case ${mid} in
    '='|'!='|'=~'|'!=~' )
      :
      ;;
    ':'|'!:'|':~'|'!:~'|'::' )
      case ${left} in
        'status' )
          case ${mid} in
            ':~'|'!:~'|'::' )
              error "\"${mid}\": invalid matcher"
              ;;
          esac
          [ "${right}" -ge 0 ] > /dev/null 2>&1 || error "\"${right}\": invalid status code"
          ;;
        'output'|'stdout'|'stderr' )
          case ${mid} in
            '::' )
              case ${right} in
                'None' )
                  :
                  ;;
                * )
                  error "\"${right}\": invalid keyword"
                  ;;
              esac
              ;;
          esac
          ;;
        * )
          error "\"${left}\": invalid resource"
          ;;
      esac
      ;;
    * )
      error "\"${mid}\": invalid matcher"
      ;;
  esac
}

parse_test_dq_bs() {
  case ${1} in
    * )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      PARSE_METHOD='parse_test_dq'
      ;;
  esac
}

parse_test_dq() {
  case ${1} in
    '"' )
      TEST_COMMENT="${TEST_COMMENT}""\""
      PARSE_METHOD="${PARENT_PARSE_METHOD}"
      ;;
    "\\" )
      TEST_COMMENT="${TEST_COMMENT}""\\"
      PARSE_METHOD='parse_test_dq_bs'
      ;;
    '' )
      error "\"${TEST_COMMENT}\": quote is not closed"
      PARSE_METHOD='parse_nl'
      TEST_COMMENT=''
      PARENT_PARSE_METHOD=''
      ;;
    * )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      ;;
  esac
}

parse_test_sq() {
  case ${1} in
    "'" )
      TEST_COMMENT="${TEST_COMMENT}""'"
      PARSE_METHOD="${PARENT_PARSE_METHOD}"
      ;;
    '' )
      error "\"${TEST_COMMENT}\": quote is not closed"
      PARSE_METHOD='parse_nl'
      TEST_COMMENT=''
      PARENT_PARSE_METHOD=''
      ;;
    * )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      ;;
  esac
}

parse_test_bs() {
  case ${1} in
    * )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      PARSE_METHOD="${PARENT_PARSE_METHOD}"
      ;;
  esac
}

parse_test_right() {
  PARENT_PARSE_METHOD="${FUNCNAME}"
  case ${1} in
    '"' )
      TEST_COMMENT="${TEST_COMMENT}""\""
      PARSE_METHOD='parse_test_dq'
      ;;
    "'" )
      TEST_COMMENT="${TEST_COMMENT}""'"
      PARSE_METHOD='parse_test_sq'
      ;;
    "\\" )
      TEST_COMMENT="${TEST_COMMENT}""\\"
      PARSE_METHOD='parse_test_bs'
      ;;
    " "|"\t" )
      _CHM_DATABASE[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},right]="${TEST_COMMENT}"
      valid
      PARSE_METHOD='parse_test_main'
      TEST_COMMENT=''
      PARENT_PARSE_METHOD=''
      ;;
    '' )
      _CHM_TEST_POSITION[${TARGET_FULLPATH},${LINE_NUMBER}]="${COMMENT_IN}"
      _CHM_DATABASE[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},right]="${TEST_COMMENT}"
      _CHM_DATABASE[${TARGET_FULLPATH},${LINE_NUMBER},max_test_index]="${TEST_INDEX}"
      ? test_exist true
      valid
      PARSE_METHOD='parse_nl'
      TEST_COMMENT=''
      PARENT_PARSE_METHOD=''
      ;;
    * )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      ;;
  esac
}

parse_test_mid() {
  case ${1} in
    '='|':'|'!'|'~' )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      ;;
    " "|"\t" )
      error "\"${TEST_COMMENT}\": empty value"
      PARSE_METHOD='parse_test_main'
      TEST_COMMENT=''
      PARENT_PARSE_METHOD=''
      ;;
    '' )
      error "\"${TEST_COMMENT}\": empty value"
      PARSE_METHOD='parse_nl'
      TEST_COMMENT=''
      PARENT_PARSE_METHOD=''
      ;;
    * )
      _CHM_DATABASE[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},mid]="${TEST_COMMENT}"
      TEST_COMMENT=''
      PARSE_METHOD='parse_test_right'
      parse_test_right "${1}"
      ;;
  esac
}

parse_test_left() {
  PARENT_PARSE_METHOD="${FUNCNAME}"
  case ${1} in
    '"' )
      TEST_COMMENT="${TEST_COMMENT}""\""
      PARSE_METHOD='parse_test_dq'
      ;;
    "'" )
      TEST_COMMENT="${TEST_COMMENT}""'"
      PARSE_METHOD='parse_test_sq'
      ;;
    "\\" )
      TEST_COMMENT="${TEST_COMMENT}""\\"
      PARSE_METHOD='parse_test_bs'
      ;;
    "!"|"="|":" )
      _CHM_DATABASE[${TARGET_FULLPATH},${LINE_NUMBER},${TEST_INDEX},left]="${TEST_COMMENT}"
      TEST_COMMENT=''
      PARSE_METHOD='parse_test_mid'
      parse_test_mid "${1}"
      ;;
    ' '|'\t' )
      error "\"${TEST_COMMENT}\": invalid token"
      PARSE_METHOD='parse_test_main'
      TEST_COMMENT=''
      PARENT_PARSE_METHOD=''
      ;;
    '' )
      error "\"${TEST_COMMENT}\": invalid token"
      PARSE_METHOD='parse_nl'
      TEST_COMMENT=''
      PARENT_PARSE_METHOD=''
      ;;
    * )
      TEST_COMMENT="${TEST_COMMENT}""${1}"
      ;;
  esac
}

parse_test_main() {
  case ${1} in
    " "|"\t" )
      :
      ;;
    '' )
      [ "$TEST_INDEX" -ge "0" ] && {
        _CHM_TEST_POSITION[${TARGET_FULLPATH},${LINE_NUMBER}]="${COMMENT_IN}"
        _CHM_DATABASE[${TARGET_FULLPATH},${LINE_NUMBER},max_test_index]="${TEST_INDEX}"
      }
      PARSE_METHOD='parse_nl'
      TEST_COMMENT=''
      ;;
    * )
      ((TEST_INDEX++))
      PARSE_METHOD='parse_test_left'
      parse_test_left "${1}"
      ;;
  esac
}

parse_meta_value() {
  case ${1} in
    '' )
      _CHM_DATABASE[${TARGET_FULLPATH},meta,${META_KEY}]="$(echo "${META_VAL}" | sed -e 's/^[ \t]*//' -e 's/[ \t]*$//')"
      PARSE_METHOD='parse_nl'
      META_KEY=''
      META_VAL=''
      ;;
    * )
      META_VAL="${META_VAL}${1}"
      ;;
  esac
}

parse_meta_key() {
  case ${1} in
    ':' )
      PARSE_METHOD='parse_meta_value'
      ;;
    '' )
      error "\"${META_KEY}\": invalid token"
      PARSE_METHOD='parse_nl'
      META_KEY=''
      ;;
    * )
      META_KEY="${META_KEY}${1}"
      ;;
  esac
}

parse_meta_main() {
  case ${1} in
    " "|"\t" )
      :
      ;;
    '' )
      PARSE_METHOD='parse_nl'
      ;;
    * )
      PARSE_METHOD='parse_meta_key'
      parse_meta_key "${1}"
      ;;
  esac
}

parse_marker() {
  case ${1} in
    "${TEST_MARKER}" )
      PARSE_METHOD='parse_test_main'
      ;;
    "${META_MARKER}" )
      PARSE_METHOD='parse_meta_main'
      ;;
    '' )
      PARSE_METHOD='parse_nl'
      ;;
    * )
      PARSE_METHOD='parse_main'
      ;;
  esac
}

parse_dq_bs() {
  case ${1} in
    '' )
      PARSE_METHOD='parse_dq'
      ;;
    * )
      PARSE_METHOD='parse_dq'
      ;;
  esac
}

parse_dq() {
  case ${1} in
    "\\" )
      PARSE_METHOD='parse_dq_bs'
      ;;
    '"' )
      PARSE_METHOD='parse_main'
      ;;
    '' )
      ;;
    * )
      :
      ;;
  esac
}

parse_sq() {
  case ${1} in
    "'" )
      PARSE_METHOD='parse_main'
      ;;
    '' )
      ;;
    * )
      :
      ;;
  esac
}

parse_bs() {
  case ${1} in
    '' )
      PARSE_METHOD='parse_main'
      ;;
    * )
      PARSE_METHOD='parse_main'
      ;;
  esac
}

parse_main() {
  case ${1} in
    "#" )
      PARSE_METHOD='parse_marker'
      COMMENT_IN='EOL'
      ;;
    "\\" )
      PARSE_METHOD='parse_bs'
      ;;
    "'" )
      PARSE_METHOD='parse_sq'
      ;;
    '"' )
      PARSE_METHOD='parse_dq'
      ;;
    '' )
      PARSE_METHOD='parse_nl'
      ;;
    * )
      ;;
  esac
}

parse_nl_space() {
  case ${1} in
    "#" )
      PARSE_METHOD='parse_marker'
      COMMENT_IN='NL'
      ;;
    " "|"\t" )
      PARSE_METHOD='parse_nl_space'
      ;;
    "\\" )
      PARSE_METHOD='parse_bs'
      ;;
    "'" )
      PARSE_METHOD='parse_sq'
      ;;
    '"' )
      PARSE_METHOD='parse_dq'
      ;;
    '' )
      PARSE_METHOD='parse_nl'
      ;;
    * )
      PARSE_METHOD='parse_main'
      ;;
  esac
}

parse_nl() {
  case ${1} in
    "#" )
      PARSE_METHOD='parse_marker'
      COMMENT_IN='NL'
      ;;
    " "|"\t" )
      PARSE_METHOD='parse_nl_space'
      ;;
    "\\" )
      PARSE_METHOD='parse_bs'
      ;;
    "'" )
      PARSE_METHOD='parse_sq'
      ;;
    '"' )
      PARSE_METHOD='parse_dq'
      ;;
    '' )
      PARSE_METHOD='parse_nl'
      ;;
    * )
      PARSE_METHOD='parse_main'
      ;;
  esac
}

parse() {
  TARGET_FULLPATH="${1}"
  local line
  local char

  while IFS= read -r line; do
    while IFS= read -r -n 1 char; do
      ${PARSE_METHOD} "${char}"
    done < <(echo "${line}")
    TEST_INDEX=-1 # reset index. '-1' means that there is no test.
    ((LINE_NUMBER++))
  done < "${TARGET_FULLPATH}"
}

main() {
  [ -f "${_CHM_PARSER_FILE}" ] && source "${_CHM_PARSER_FILE}"

  for i in "$@"
  do
    quiet?_echo "==> Parsing: \"${i}\""
    if ! [ "${_CHM_PARSED[${i}]}" ]; then
      LINE_NUMBER=1
      TEST_INDEX=-1
      PARSE_METHOD='parse_nl' # initial parse-method
      ? test_exist false

      parse "${i}"
      _CHM_PARSED[${i}]='parsed'

      if ! ? test_exist; then
        quiet?_eecho "===> test not found"
        quiet?_eecho
        ? not_found_flag true
        _CHM_DATABASE[${i},do_not_run]=true
      fi
    else
      quiet?_eecho "===> already parsed"
      quiet?_eecho
      ? parse_dup_flag true
    fi
  done

  {
    declare -p _CHM_TEST_POSITION
    declare -p _CHM_DATABASE
    declare -p _CHM_PARSED
  } > "${_CHM_PARSER_FILE}"

  $_CHM_DEBUG && {
    echo " * $(declare -p _CHM_TEST_POSITION)"
    echo " * $(declare -p _CHM_DATABASE)"
    echo " * $(declare -p _CHM_PARSED)"
  }

  if ? error_exist_flag; then
    return 10
  elif ? not_found_flag; then
    return 11
  elif ? parse_dup_flag; then
    return 12
  else
    return 0
  fi
}

main "$@"
