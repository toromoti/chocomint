#!/bin/bash
# vim: ft=sh

_chocomint_tput_echo() {
  case $1 in
    [0-7] )
      _chocomint_tput setaf "$1"
      ;;
    'bold' )
      _chocomint_tput bold
      ;;
  esac
  _chocomint_echo "${@:2}$(tput sgr0)"
}

_chocomint_echo() {
  echo "$@" >&3
}

_chocomint_cat() {
  cat "$@" >&3
}

_chocomint_tput() {
  tput "$@" >&3
}

_chocomint_print_judgement() {
  # $1 label tput color
  # $2 label string
  # $3 left
  # $4 mid
  # $5 right
  # $6 exitstat
  local _chocomint_tput_opt="5"
  _chocomint_tput_echo "$1" -n "$2" # 'ok' or 'ng'
  case $3 in
    'status' )
      case $4 in
        ':' )
          _chocomint_echo -n "return "
          _chocomint_tput_echo "$_chocomint_tput_opt" -n "$6"
          _chocomint_echo -n " should be "
          _chocomint_tput_echo "$_chocomint_tput_opt" "$5"
          ;;
        '!:' )
          _chocomint_echo -n "return "
          _chocomint_tput_echo "$_chocomint_tput_opt" -n "$6"
          _chocomint_echo -n " should not be "
          _chocomint_tput_echo "$_chocomint_tput_opt" "$5"
          ;;
      esac
      ;;
    'match' )
      case $4 in
        ':' )
          _chocomint_echo -n "match '"
          _chocomint_tput_echo "$_chocomint_tput_opt" -n "$5"
          _chocomint_echo "'"
          ;;
        '!:' )
          _chocomint_echo -n "not match '"
          _chocomint_tput_echo "$_chocomint_tput_opt" -n "$5"
          _chocomint_echo "'"
          ;;
      esac
      ;;
    * ) # judge variables
      case $4 in
        '=' )
          _chocomint_echo -n "value '"
          _chocomint_tput_echo "$_chocomint_tput_opt" -n "$3"
          _chocomint_echo -n "' should be '"
          _chocomint_tput_echo "$_chocomint_tput_opt" -n "$5"
          _chocomint_echo "'"
          ;;
        '!=' )
          _chocomint_echo -n "value '"
          _chocomint_tput_echo "$_chocomint_tput_opt" -n "$3"
          _chocomint_echo -n "' should not be '"
          _chocomint_tput_echo "$_chocomint_tput_opt" -n "$5"
          _chocomint_echo "'"
          ;;
      esac
      ;;
  esac
}

_chocomint_ok() {
  # $1 left
  # $2 mid
  # $3 right
  # $4 exitstat
  _chocomint_print_judgement "2" "   ✔ " "$@"
}

_chocomint_ng() {
  # $1 left
  # $2 mid
  # $3 right
  # $4 exitstat
  _chocomint_print_judgement "1" "   ✘ " "$@"
}

_chocomint_display_stdouterr() {
  if $1; then
    _chocomint_echo "${_CHOCOMINT_TIME_RESULT::-6} sec. failed. then, display 'STDOUT' and 'STDERR'."
    if [ -s "$_CHOCOMINT_CMD_OUT" ] || [ -s "$_CHOCOMINT_CMD_ERR" ]; then
      if [ -s "$_CHOCOMINT_CMD_OUT" ]; then
        _chocomint_tput_echo bold '``` STDOUT'
        _chocomint_cat $_CHOCOMINT_CMD_OUT
        _chocomint_tput sgr0 # for reset previous output attributes
        _chocomint_tput_echo bold '```'
      else
        _chocomint_echo "'STDOUT' is nothing."
      fi
      if [ -s "$_CHOCOMINT_CMD_ERR" ]; then
        _chocomint_tput_echo bold '``` STDERR'
        _chocomint_cat $_CHOCOMINT_CMD_ERR
        _chocomint_tput sgr0 # for reset previous output attributes
        _chocomint_tput_echo bold '```'
      else
        _chocomint_echo "'STDERR' is nothing."
      fi
    else
      _chocomint_tput_echo bold "but, output is nothing."
    fi
  else
    _chocomint_echo "${_CHOCOMINT_TIME_RESULT::-6} sec. succeeded."
    ((_CHOCOMINT_CMD_SUCCESS++))
  fi
}

_chocomint_show_overall() {
  tput bold
  tput setaf 6
  echo "$1 tests failed."
  echo "$2/$3 tests, $4/$5 command-executions succeeded.$(tput sgr0)"
}

_chocomint_show_command() {
  _chocomint_tput bold
  _chocomint_tput_echo 3 -n '=> '
  _chocomint_tput sgr0
  echo "$1" |
  sed s/^/$(tput setaf 3)$(tput bold)/ |
  sed s/$/$(tput sgr0)/ >&3
}
