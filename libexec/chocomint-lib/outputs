#!/bin/bash
# vim: ft=sh

function _chm_.echo() { echo "$@" >&3; }
function _chm_.print() { echo -n "$@" >&3; }
function _chm_.cat() { cat "$@" >&3; }
function _chm_.tput() { $_CHM_TPUT "$@" >&3; }

function _chm_outputs.ok() { _chm_.judgeout "2" "   ✔ " "$@"; }
function _chm_outputs.ng() { _chm_.judgeout "1" "   ✘ " "$@"; }

function _chm_outputs.title() {
  local _chm_name_ver=" $* "
  local _chm_ruler
  local _chm_ruler_char='+'
  for (( _chm_i=0; _chm_i<${#_chm_name_ver}; _chm_i++ ))
  do
    _chm_ruler="${_chm_ruler}${_chm_ruler_char}"
  done
  echo "$_chm_ruler"
  echo "$_chm_name_ver"
  echo "$_chm_ruler"
}


function _chm_.tprint() {
  while [ "$1" != "--" ]
  do
    case $1 in
      [0-7] )
        _chm_.tput setaf "$1"
        ;;
      'bold' )
        _chm_.tput bold
        ;;
    esac
    shift
  done
  _chm_.print "${@:2}$($_CHM_TPUT sgr0)"
}


function _chm_.judgeout() {
  # $1 label tput color
  # $2 label string
  # $3 left
  # $4 mid
  # $5 right
  # $6 exitstat
  local _chm_opt_tput="5"
  _chm_.tprint "$1" -- "$2" # 'ok' or 'ng'
  case $3 in
    'status' )
      case $4 in
        ':' )
          _chm_.print "status "
          _chm_.tprint "$_chm_opt_tput" -- "$6"
          _chm_.print " should be "
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo
          ;;
        '!:' )
          _chm_.print "status "
          _chm_.tprint "$_chm_opt_tput" -- "$6"
          _chm_.print " should NOT be "
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo
          ;;
      esac
      ;;
    'output' )
      case $4 in
        ':' )
          _chm_.print "fixed-strings \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\` should match outputs"
          ;;
        '!:' )
          _chm_.print "fixed-strings \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\` should NOT match outputs"
          ;;
        ':~' )
          _chm_.print "extended-regexp \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\` should match outputs"
          ;;
        '!:~' )
          _chm_.print "extended-regexp \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\` should NOT match outputs"
          ;;
      esac
      ;;
    'stdout' )
      case $4 in
        ':' )
          _chm_.print "fixed-strings \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\` should match STDOUT"
          ;;
        '!:' )
          _chm_.print "fixed-strings \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\` should NOT match STDOUT"
          ;;
        ':~' )
          _chm_.print "extended-regexp \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\` should match STDOUT"
          ;;
        '!:~' )
          _chm_.print "extended-regexp \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\` should NOT match STDOUT"
          ;;
      esac
      ;;
    'stderr' )
      case $4 in
        ':' )
          _chm_.print "fixed-strings \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\` should match STDERR"
          ;;
        '!:' )
          _chm_.print "fixed-strings \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\` should NOT match STDERR"
          ;;
        ':~' )
          _chm_.print "extended-regexp \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\` should match STDERR"
          ;;
        '!:~' )
          _chm_.print "extended-regexp \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\` should NOT match STDERR"
          ;;
      esac
      ;;
    * ) # judge variables
      case $4 in
        '=' )
          _chm_.print "value \`"
          _chm_.tprint "$_chm_opt_tput" -- "$3"
          _chm_.print "\` should be \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\`"
          ;;
        '!=' )
          _chm_.print "value \`"
          _chm_.tprint "$_chm_opt_tput" -- "$3"
          _chm_.print "\` should NOT be \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\`"
          ;;
        '=~' )
          _chm_.print "value \`"
          _chm_.tprint "$_chm_opt_tput" -- "$3"
          _chm_.print "\` should match extended-regexp \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\`"
          ;;
        '!=~' )
          _chm_.print "value \`"
          _chm_.tprint "$_chm_opt_tput" -- "$3"
          _chm_.print "\` should NOT match extended-regexp \`"
          _chm_.tprint "$_chm_opt_tput" -- "$5"
          _chm_.echo "\`"
          ;;
      esac
      ;;
  esac
}


function _chm_.stdout() {
  _chm_.tprint bold -- '>>> STDOUT BEGIN'
  _chm_.echo
  _chm_.cat $_CHM_CMD_OUT
  _chm_.tput sgr0 # for reset previous output attributes
  _chm_.tprint bold -- '>>> STDOUT END'
  _chm_.echo
}


function _chm_.stderr() {
  _chm_.tprint bold -- '>>> STDERR BEGIN'
  _chm_.echo
  _chm_.cat $_CHM_CMD_ERR
  _chm_.tput sgr0 # for reset previous output attributes
  _chm_.tprint bold -- '>>> STDERR END'
  _chm_.echo
}


function _chm_outputs.stdouterr() {
  # $1 failure flag
  $_CHM_BC_COMMAND_EXIST &&
    _chm_.print "${_CHM_TIME_RESULT::-7} seconds. "
  if $1; then
    _chm_.echo "failed."
    if [ -s "$_CHM_CMD_OUT" ] && [ -s "$_CHM_CMD_ERR" ]; then
      _chm_.echo
      _chm_.stdout
      _chm_.echo
      _chm_.stderr
      _chm_.echo
    elif [ -s "$_CHM_CMD_OUT" ]; then
      _chm_.echo "'STDERR' is nothing."
      _chm_.echo
      _chm_.stdout
      _chm_.echo
    elif [ -s "$_CHM_CMD_ERR" ]; then
      _chm_.echo "'STDOUT' is nothing."
      _chm_.echo
      _chm_.stderr
      _chm_.echo
    else
      _chm_.tprint bold -- "output is nothing."
      _chm_.echo
    fi
  else
    _chm_.echo "succeeded."
    ((_CHM_CMD_SUCCESS++))
  fi
}


function _chm_outputs.overall_results() {
  echo
  $_CHM_TPUT bold
  if [ $1 -eq 0 ]; then
    echo "$($_CHM_TPUT setaf 2)$3 tests, $5 commands all succeeded.$($_CHM_TPUT sgr0)"
  else
    echo "$($_CHM_TPUT setaf 1)$1 tests failed.$($_CHM_TPUT sgr0)"
    $_CHM_TPUT bold
    echo "$($_CHM_TPUT setaf 1)$2/$3 tests, $4/$5 commands succeeded.$($_CHM_TPUT sgr0)"
  fi
}


function _chm_outputs.command() {
  _chm_.tprint bold 3 -- '==> '
  echo "$1" | sed s/^/$($_CHM_TPUT setaf 3)/ | sed s/$/$($_CHM_TPUT sgr0)/ >&3
}
