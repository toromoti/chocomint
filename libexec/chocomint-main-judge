#!/usr/bin/env bash
# vim: ft=sh

match_file() {
  # $1 right string
  local matching=false
  local opt="$1"
  local string="$2"
  shift 2

  linenum="$(echo -n "$string" | wc -l)"

  for file in "$@"
  do
    if [ "${linenum}" -eq 0 ]; then
      grep "$opt" -q "$string" "$file" && matching=true
    else
      [ "$opt" = "-E" ] && {
        echo Runtime error: Regexp matcher is not available in multi-line matching >&3
        exit 21
      }
      # To match the multiple lines, using 'grep --perl-regexp'
      # So, escape '$string' except '\n'
      perl_regex_escape="$(
        echo -n "$string" |
        sed 's/\\/\\\\/g'      |
        sed 's/\*/\\*/g'       |
        sed 's/\+/\\+/g'       |
        sed 's/\./\\./g'       |
        sed 's/\?/\\?/g'       |
        sed 's/{/\\{/g'        |
        sed 's/}/\\}/g'        |
        sed 's/(/\\(/g'        |
        sed 's/)/\\)/g'        |
        sed 's/\[/\\[/g'       |
        sed 's/\]/\\]/g'       |
        sed 's/\^/\\^/g'       |
        sed 's/\$/\\$/g'       |
        sed 's/\-/\\-/g'       |
        sed 's/|/\\|/g'        |
        sed 's/\//\\\//g'      |
        sed ':a;N;$!ba;s/\n/\\n/g'
      )"    # `- http://stackoverflow.com/questions/1251999/sed-how-can-i-replace-a-newline-n

      # ${file} is output only. copy it temporary file.
      local file_copy="$(mktemp "${file}.copy.$$.XXXXXX")"
      cp "${file}" "${file_copy}"

      grep -Pzo -q "$perl_regex_escape" "${file_copy}" && matching=true

      rm "${file_copy}"
    fi
  done

  $matching && return 0 || return 1
}

judge() {
  # $1 left string
  # $2 middle string
  # $3 right string
  # $4 exit status
  case $1 in
    'output' )
      case $2 in
        '::' )
          case $3 in
            'None' )
              ([ ! -s "$_CHM_CMD_OUT_FILE" ] && [ ! -s "$_CHM_CMD_ERR_FILE" ]) && return 0 || return 1
              ;;
          esac
          ;;
      esac
      ;;
    'stdout' )
      case $2 in
        '::' )
          case $3 in
            'None' )
              [ ! -s "$_CHM_CMD_OUT_FILE" ] && return 0 || return 1
              ;;
          esac
          ;;
      esac
      ;;
    'stderr' )
      case $2 in
        '::' )
          case $3 in
            'None' )
              [ ! -s "$_CHM_CMD_ERR_FILE" ] && return 0 || return 1
              ;;
          esac
          ;;
      esac
      ;;
  esac

  case $2 in
    "=" )
      [ "$1" = "$3" ] && return 0 || return 1
      ;;
    "!=" )
      [ "$1" != "$3" ] && return 0 || return 1
      ;;
    '=~' )
      (echo "$1" | grep -E -q "$3") && return 0 || return 1
      ;;
    '!=~' )
      (echo "$1" | grep -E -q "$3") && return 1 || return 0
      ;;
    ':'|':~' )
      case $1 in
        'status' )
          if [ "$4" -eq "$3" ]; then
            return 0
          else
            return 1
          fi
          ;;
        'output' )
          [ "$2" = ':~' ] && local opt='-E' || local opt='-F'
          if match_file $opt "$3" "$_CHM_CMD_OUT_FILE" "$_CHM_CMD_ERR_FILE"
          then
            return 0
          else
            return 1
          fi
          ;;
        'stdout' )
          [ "$2" = ':~' ] && local opt='-E' || local opt='-F'
          if match_file $opt "$3" "$_CHM_CMD_OUT_FILE"; then
            return 0
          else
            return 1
          fi
          ;;
        'stderr' )
          [ "$2" = ':~' ] && local opt='-E' || local opt='-F'
          if match_file $opt "$3" "$_CHM_CMD_ERR_FILE"; then
            return 0
          else
            return 1
          fi
          ;;
      esac
      ;;
    '!:'|'!:~' )
      case $1 in
        'status' )
          if [ "$4" -ne "$3" ]; then
            return 0
          else
            return 1
          fi
          ;;
        'output' )
          [ "$2" = '!:~' ] && local opt='-E' || local opt='-F'
          if match_file $opt "$3" "$_CHM_CMD_OUT_FILE" "$_CHM_CMD_ERR_FILE"; then
            return 1
          else
            return 0
          fi
          ;;
        'stdout' )
          [ "$2" = '!:~' ] && local opt='-E' || local opt='-F'
          if match_file $opt "$3" "$_CHM_CMD_OUT_FILE"; then
            return 1
          else
            return 0
          fi
          ;;
        'stderr' )
          [ "$2" = '!:~' ] && local opt='-E' || local opt='-F'
          if match_file $opt "$3" "$_CHM_CMD_ERR_FILE"; then
            return 1
          else
            return 0
          fi
          ;;
      esac
      ;;
  esac
}

judge "$@"
