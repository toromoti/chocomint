#!/usr/bin/env bash
# vim: ft=sh

source ${_CHM_LIBEXEC}/chocomint-lib/outputs

_chm_aggregate_results() {
  # $1 exitstatus
  ((_CHM_CMD_COUNT++))
  local _chm_cmd_failure=false
  local _chm_left
  local _chm_mid
  local _chm_right

  for _chm_i in $(seq 0 ${_CHM_DB[${_CHM_FULLPATH},${_CHM_TESTLINE},max]})
  do
    ((_CHM_TEST_COUNT++))
    _chm_left="$(eval echo "${_CHM_DB[${_CHM_FULLPATH},${_CHM_TESTLINE},${_chm_i},left]}")"
    _chm_mid="$(eval echo "${_CHM_DB[${_CHM_FULLPATH},${_CHM_TESTLINE},${_chm_i},mid]}")"
    _chm_right="$(eval echo "${_CHM_DB[${_CHM_FULLPATH},${_CHM_TESTLINE},${_chm_i},right]}")"

    if source ${_CHM_LIBEXEC}/chocomint-judge "${_chm_left}" "${_chm_mid}" "${_chm_right}" "${1}"
    then
      ((_CHM_TEST_SUCCESS++))
      _chm_outputs.ok "${_chm_left}" "${_chm_mid}" "${_chm_right}" "${1}"
    else
      ((_CHM_TEST_FAILURE++))
      _chm_outputs.ng "${_chm_left}" "${_chm_mid}" "${_chm_right}" "${1}"
      _chm_cmd_failure=true
      _CHM_FAILURE=true
    fi
  done

  _chm_outputs.stdouterr "${_chm_cmd_failure}"
}


_chm_prepare_execution() {
  if [ "${_CHM_TEST_POSITION[${_CHM_FULLPATH},${1}]-}" = "EOL" ]; then
    _CHM_TEST_EXIST=true
    _CHM_TESTLINE="${1}"
  elif [ "${_CHM_TEST_POSITION[${_CHM_FULLPATH},$((${1}+1))]-}" = "NL" ]; then
    _CHM_TEST_EXIST=true
    _CHM_TESTLINE="$((${1}+1))"
  else
    _CHM_TEST_EXIST=false
  fi

  ${_CHM_TEST_EXIST} && {
    : > ${_CHM_CMD_OUT}
    : > ${_CHM_CMD_ERR}
    _chm_outputs.command "${1}L: " "${2}"
  }
}


_chm_trap() {
  # $1 line number
  # $2 source path
  local _chm_prev_stat="$?"

  [ "${_CHM_TIME_START}" ] && {
    _CHM_TIME_RESULT=$(( $(date +%s) - ${_CHM_TIME_START} ))
  }

  if [ ${3} -eq ${_CHM_TARGETFILE_STACK_LEVEL} ]; then
    ${_CHM_TEST_EXIST} && _chm_aggregate_results "${_chm_prev_stat}"
    _chm_prepare_execution "${1}" "${BASH_COMMAND}"
  fi

  _CHM_TIME_START=$(date +%s)
}


_chm_run_test() {
  exec 3>&1 4>&2 1> ${_CHM_CMD_OUT} 2> ${_CHM_CMD_ERR}
  set -T; trap '_chm_trap "${LINENO}" "${BASH_SOURCE}" "${#FUNCNAME[*]}"' DEBUG
  _CHM_TARGETFILE_STACK_LEVEL=$((${#FUNCNAME[*]} + 1))
  source "${1}"; local exitstat=$?
  # if the last command has a test, execute the analysis here.
  trap DEBUG; set +T
  ${_CHM_TEST_EXIST} && _chm_aggregate_results "${exitstat}"
  exec 1>&3- 2>&4-
  rm "${_CHM_CMD_OUT}" "${_CHM_CMD_ERR}"
}


_chm_main() {
  source ${_CHM_TEST_POSITION_FILE}
  source ${_CHM_DB_FILE}

  local _chm_count=1
  for _chm_i in "$@"
  do
    _CHM_TEST_EXIST=false
    _CHM_TIME_START=''
    _CHM_FULLPATH="${_chm_i}"

    _chm_outputs.section "[${_chm_count}/${#@}] ${_CHM_FULLPATH}"
    _chm_run_test "${_CHM_FULLPATH}"
    ((_chm_count++))
  done

  declare -p _CHM_TEST_FAILURE >  ${_CHM_TEST_RESULTS_FILE}
  declare -p _CHM_TEST_SUCCESS >> ${_CHM_TEST_RESULTS_FILE}
  declare -p _CHM_TEST_COUNT   >> ${_CHM_TEST_RESULTS_FILE}
  declare -p _CHM_CMD_SUCCESS  >> ${_CHM_TEST_RESULTS_FILE}
  declare -p _CHM_CMD_COUNT    >> ${_CHM_TEST_RESULTS_FILE}
  declare -p _CHM_FAILURE      >> ${_CHM_TEST_RESULTS_FILE}
}

_chm_main "$@"
